From a319bf3a5ec8c4d77096d59a521a8018c3371104 Mon Sep 17 00:00:00 2001
From: PratikBhusal <PratikBhusal@users.noreply.github.com>
Date: Wed, 24 Oct 2018 14:44:17 -0500
Subject: [PATCH] sxiv now can load settings from Xresources file

The following setitngs from config.h can now be loaded from your
Xresources config file:

BAR_FONT     ( default: sxiv.font )
WIN_BG_COLOR ( default: sxiv.background )
WIN_FS_COLOR ( default: sxiv.fsColor )
SEL_COLOR    ( default: sxiv.selColor )
BAR_BG_COLOR ( default: sxiv.barBackground )
BAR_FG_COLOR ( default: sxiv.barForeground )

GAMMA_MAX ( default: sxiv.maxGamma )
GAMMA_RANGE ( default: sxiv.gammaRange )
PAN_FRACTION ( default: sxiv.panFraction )
ANTI_ALIAS ( default: sxiv.enableAntiAlias )
ALPHA_LAYER ( default: sxiv.starAlphaLayer )

THUMB_SIZE ( default: sxiv.defaultThumbnailSize )
---
 Makefile          |  2 +-
 config.def.h      | 60 +++++++++++++++++++++++++++++++++---------
 image.c           |  8 +++---
 sxiv.h            | 24 +++++++++++++++++
 thumbs.c          |  1 +
 window.c          |  2 ++
 xresources_init.c | 67 +++++++++++++++++++++++++++++++++++++++++++++++
 7 files changed, 148 insertions(+), 16 deletions(-)
 create mode 100644 xresources_init.c

diff --git a/Makefile b/Makefile
index fbcafd6..a2922c1 100644
--- a/Makefile
+++ b/Makefile
@@ -27,7 +27,7 @@ ldlibs = $(LDLIBS) -lImlib2 -lX11 -lXft -lfontconfig \
   $(lib_exif_$(HAVE_LIBEXIF)) $(lib_gif_$(HAVE_GIFLIB))
 
 objs = autoreload_$(AUTORELOAD).o commands.o image.o main.o options.o \
-  thumbs.o util.o window.o
+  thumbs.o util.o window.o xresources_init.o
 
 all: sxiv
 
diff --git a/config.def.h b/config.def.h
index 58e728e..68dc383 100644
--- a/config.def.h
+++ b/config.def.h
@@ -9,16 +9,30 @@ enum {
 /* bar font:
  * (see fonts-conf(5) subsection "FONT NAMES" for valid values)
  */
-static const char * const BAR_FONT = "monospace:size=8";
+static const char * BAR_FONT = "monospace:size=8";
 
 /* colors:
  * (see X(7) section "COLOR NAMES" for valid values)
  */
-static const char * const WIN_BG_COLOR = "#555555";
-static const char * const WIN_FS_COLOR = "#000000";
-static const char * const SEL_COLOR    = "#EEEEEE";
-static const char * const BAR_BG_COLOR = "#222222";
-static const char * const BAR_FG_COLOR = "#EEEEEE";
+static const char * WIN_BG_COLOR = "#555555";
+static const char * WIN_FS_COLOR = "#000000";
+static const char * SEL_COLOR    = "#EEEEEE";
+static const char * BAR_BG_COLOR = "#222222";
+static const char * BAR_FG_COLOR = "#EEEEEE";
+
+/*
+ * Xresources preference(s) for window settings to load at startup
+ */
+#ifdef _XRESOURCES_CONFIG
+    static const ResourcePref win_resources[] = {
+        { "font",          STRING, &BAR_FONT     },
+        { "background",    STRING, &WIN_BG_COLOR },
+        { "fsColor",       STRING, &WIN_FS_COLOR },
+        { "selColor",      STRING, &SEL_COLOR    },
+        { "barBackground", STRING, &BAR_BG_COLOR },
+        { "barForeground", STRING, &BAR_FG_COLOR },
+    };
+#endif /* _XRESOURCES_CONFIG */
 
 #endif
 #ifdef _IMAGE_CONFIG
@@ -37,21 +51,34 @@ enum { SLIDESHOW_DELAY = 5 };
 /* gamma correction: the user-visible ranges [-GAMMA_RANGE, 0] and
  * (0, GAMMA_RANGE] are mapped to the ranges [0, 1], and (1, GAMMA_MAX].
  * */
-static const double GAMMA_MAX   = 10.0;
-static const int    GAMMA_RANGE = 32;
+static double GAMMA_MAX   = 10.0;
+static int    GAMMA_RANGE = 32;
 
 /* command i_scroll pans image 1/PAN_FRACTION of screen width/height */
-static const int PAN_FRACTION = 5;
+static int PAN_FRACTION = 5;
 
 /* if false, pixelate images at zoom level != 100%,
  * toggled with 'a' key binding
  */
-static const bool ANTI_ALIAS = true;
+static bool ANTI_ALIAS = true;
 
 /* if true, use a checkerboard background for alpha layer,
  * toggled with 'A' key binding
  */
-static const bool ALPHA_LAYER = false;
+static bool ALPHA_LAYER = false;
+
+/*
+ * Xresources preference(s) for image mode settings to load at startup
+ */
+#ifdef _XRESOURCES_CONFIG
+    static const ResourcePref image_resources[] = {
+        { "maxGamma",        DOUBLE, &GAMMA_MAX    },
+        { "gammaRange",      INT,    &GAMMA_RANGE  },
+        { "panFraction",     INT,    &PAN_FRACTION },
+        { "enableAntiAlias", BOOL,   &ANTI_ALIAS   },
+        { "starAlphaLayer",  BOOL,   &ALPHA_LAYER  },
+    };
+#endif /* _XRESOURCES_CONFIG */
 
 #endif
 #ifdef _THUMBS_CONFIG
@@ -60,7 +87,16 @@ static const bool ALPHA_LAYER = false;
 static const int thumb_sizes[] = { 32, 64, 96, 128, 160 };
 
 /* thumbnail size at startup, index into thumb_sizes[]: */
-static const int THUMB_SIZE = 3;
+static int THUMB_SIZE = 3;
+
+/*
+ * Xresources preference(s) for thumbnail mode settings to load at startup
+ */
+#ifdef _XRESOURCES_CONFIG
+    static const ResourcePref thumbs_resources[] = {
+        { "defaultThumbnailSize", INT, &THUMB_SIZE },
+    };
+#endif /* _XRESOURCES_CONFIG */
 
 #endif
 #ifdef _MAPPINGS_CONFIG
diff --git a/image.c b/image.c
index 1230750..b24ce4c 100644
--- a/image.c
+++ b/image.c
@@ -46,13 +46,15 @@ static int zoomdiff(img_t *img, float z)
 
 void img_init(img_t *img, win_t *win)
 {
-	zoom_min = zoom_levels[0] / 100.0;
-	zoom_max = zoom_levels[ARRLEN(zoom_levels) - 1] / 100.0;
-
 	imlib_context_set_display(win->env.dpy);
 	imlib_context_set_visual(win->env.vis);
 	imlib_context_set_colormap(win->env.cmap);
 
+	init_xresources(win->env.dpy, image_resources, ARRLEN(image_resources));
+
+	zoom_min = zoom_levels[0] / 100.0;
+	zoom_max = zoom_levels[ARRLEN(zoom_levels) - 1] / 100.0;
+
 	img->im = NULL;
 	img->win = win;
 	img->scalemode = options->scalemode;
diff --git a/sxiv.h b/sxiv.h
index 757674e..46fa780 100644
--- a/sxiv.h
+++ b/sxiv.h
@@ -450,5 +450,29 @@ void win_set_title(win_t*, const char*);
 void win_set_cursor(win_t*, cursor_t);
 void win_cursor_pos(win_t*, int*, int*);
 
+
+/* Xresources Patch: xresources_init.c */
+#include <X11/Xresource.h>
+
+#ifndef _XRESOURCES_CONFIG
+    #define _XRESOURCES_CONFIG
+#endif /* _XRESOURCES_CONFIG */
+
+typedef enum resource_type {
+	STRING = 0,
+        INT = 1,
+        BOOL = 2,
+        DOUBLE = 3
+} resource_type;
+
+typedef struct {
+	const char *name;
+	const resource_type type;
+	const void *dst;
+} ResourcePref;
+
+void init_xresources(Display *, const ResourcePref [], size_t);
+void get_xresource(XrmDatabase, const char*, resource_type, const void*);
+
 #endif /* SXIV_H */
 
diff --git a/thumbs.c b/thumbs.c
index c389b39..a917578 100644
--- a/thumbs.c
+++ b/thumbs.c
@@ -145,6 +145,7 @@ void tns_clean_cache(tns_t *tns)
 void tns_init(tns_t *tns, fileinfo_t *files, const int *cnt, int *sel,
               win_t *win)
 {
+	init_xresources( win->env.dpy, thumbs_resources, ARRLEN(thumbs_resources) );
 	int len;
 	const char *homedir, *dsuffix = "";
 
diff --git a/window.c b/window.c
index 2ed33ca..03a58cd 100644
--- a/window.c
+++ b/window.c
@@ -122,6 +122,8 @@ void win_init(win_t *win)
 	if (setlocale(LC_CTYPE, "") == NULL || XSupportsLocale() == 0)
 		error(0, 0, "No locale support");
 
+	init_xresources(e->dpy, win_resources, ARRLEN(win_resources));
+
 	win_init_font(e, BAR_FONT);
 
 	win_alloc_color(e, WIN_BG_COLOR, &win->bgcol);
diff --git a/xresources_init.c b/xresources_init.c
new file mode 100644
index 0000000..65663bb
--- /dev/null
+++ b/xresources_init.c
@@ -0,0 +1,67 @@
+#include "sxiv.h"
+#ifdef _XRESOURCES_CONFIG
+#include "ctype.h"
+#include "config.h"
+#include <X11/Xresource.h>
+
+void get_xresource(const XrmDatabase db, const char* rsc, const resource_type rtype, const void* dst)
+{
+	char fullname[256];
+	snprintf(fullname, sizeof(fullname), "%s.%s",
+		options->res_name != NULL ? options->res_name : "sxiv", rsc);
+	fullname[sizeof(fullname) - 1] = '\0';
+
+	char *type;
+	XrmValue ret;
+	XrmGetResource(db, fullname, "Sxiv", &type, &ret);
+	if (ret.addr == NULL || strncmp("String", type, 64)) {
+		return;
+        }
+
+	switch (rtype) {
+		case STRING:
+		    *( (char**)dst ) = ret.addr;
+		    break;
+                case INT:
+                    *( (int*)dst ) = strtoul(ret.addr, NULL, 10);
+                    break;
+                case BOOL:
+                    *( (bool*)dst ) = (ret.addr[0] == '1') || ( tolower(ret.addr[0] == 't') );
+                    break;
+                case DOUBLE:
+                    *( (double*)dst ) = strtod(ret.addr, NULL);
+                    break;
+	}
+}
+
+void init_xresources(Display *dpy, const ResourcePref resources[], size_t size) {
+	XrmInitialize();
+
+	const char *resource_manager = XResourceManagerString(dpy);
+	if (resource_manager == NULL) {
+		free((char*)resource_manager);
+		resource_manager = NULL;
+		return;
+	}
+
+	const XrmDatabase db = XrmGetStringDatabase(resource_manager);
+
+	/*  Free resource_manager? */
+	/*
+	free((char*)resource_manager);
+	resource_manager = NULL;
+	*/
+
+	if (db == NULL) {
+		return;
+        }
+
+	const ResourcePref *p;
+	for (p = resources; p < resources + size; p++) {
+	    get_xresource(db, p->name, p->type, p->dst);
+	}
+	/* p = NULL; */ /* Set p to NULL before function's end? */
+	/* free(db); */ /* Free db? */
+}
+
+#endif
-- 
2.17.1

